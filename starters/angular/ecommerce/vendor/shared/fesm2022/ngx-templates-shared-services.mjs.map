{"version":3,"file":"ngx-templates-shared-services.mjs","sources":["../../../projects/shared/services/src/local-storage.service.ts","../../../projects/shared/services/src/window.provider.ts","../../../projects/shared/services/ngx-templates-shared-services.ts"],"sourcesContent":["import { isPlatformBrowser } from '@angular/common';\nimport { Injectable, PLATFORM_ID, inject } from '@angular/core';\n\n/**\n * localStorage wrapper. Browser-only.\n * Should not be used during the server-side\n * rendering phase (no use case).\n */\n@Injectable({ providedIn: 'root' })\nexport class LocalStorage {\n  private _platformId = inject(PLATFORM_ID);\n\n  private get _isBrowser() {\n    return isPlatformBrowser(this._platformId);\n  }\n\n  get(key: string): string | null {\n    if (!this._isBrowser) {\n      return null;\n    }\n    return localStorage.getItem(key);\n  }\n\n  getJSON(key: string): object | null {\n    if (!this._isBrowser) {\n      return null;\n    }\n\n    const item = this.get(key);\n\n    try {\n      return JSON.parse(item || '');\n    } catch {\n      return null;\n    }\n  }\n\n  set(key: string, data: string) {\n    if (!this._isBrowser) {\n      return;\n    }\n\n    localStorage.setItem(key, data);\n  }\n\n  setJSON(key: string, data: object) {\n    if (!this._isBrowser) {\n      return;\n    }\n\n    localStorage.setItem(key, JSON.stringify(data));\n  }\n\n  remove(key: string) {\n    if (!this._isBrowser) {\n      return;\n    }\n\n    localStorage.removeItem(key);\n  }\n\n  clear() {\n    if (!this._isBrowser) {\n      return;\n    }\n\n    localStorage.clear();\n  }\n}\n","import { isPlatformBrowser } from '@angular/common';\nimport { InjectionToken, PLATFORM_ID, Provider, inject } from '@angular/core';\n\nexport const WINDOW = new InjectionToken<Window>('WINDOW');\n\nexport const provideWindow = (): Provider => ({\n  provide: WINDOW,\n  useFactory: () => {\n    const platformId = inject(PLATFORM_ID);\n    return isPlatformBrowser(platformId) ? window : {};\n  },\n});\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":";;;;AAGA;;;;AAIG;MAEU,YAAY,CAAA;AADzB,IAAA,WAAA,GAAA;AAEU,QAAA,IAAA,CAAA,WAAW,GAAG,MAAM,CAAC,WAAW,CAAC;AA0D1C;AAxDC,IAAA,IAAY,UAAU,GAAA;AACpB,QAAA,OAAO,iBAAiB,CAAC,IAAI,CAAC,WAAW,CAAC;;AAG5C,IAAA,GAAG,CAAC,GAAW,EAAA;AACb,QAAA,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE;AACpB,YAAA,OAAO,IAAI;;AAEb,QAAA,OAAO,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC;;AAGlC,IAAA,OAAO,CAAC,GAAW,EAAA;AACjB,QAAA,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE;AACpB,YAAA,OAAO,IAAI;;QAGb,MAAM,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC;AAE1B,QAAA,IAAI;YACF,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,EAAE,CAAC;;AAC7B,QAAA,MAAM;AACN,YAAA,OAAO,IAAI;;;IAIf,GAAG,CAAC,GAAW,EAAE,IAAY,EAAA;AAC3B,QAAA,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE;YACpB;;AAGF,QAAA,YAAY,CAAC,OAAO,CAAC,GAAG,EAAE,IAAI,CAAC;;IAGjC,OAAO,CAAC,GAAW,EAAE,IAAY,EAAA;AAC/B,QAAA,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE;YACpB;;AAGF,QAAA,YAAY,CAAC,OAAO,CAAC,GAAG,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;;AAGjD,IAAA,MAAM,CAAC,GAAW,EAAA;AAChB,QAAA,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE;YACpB;;AAGF,QAAA,YAAY,CAAC,UAAU,CAAC,GAAG,CAAC;;IAG9B,KAAK,GAAA;AACH,QAAA,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE;YACpB;;QAGF,YAAY,CAAC,KAAK,EAAE;;8GAzDX,YAAY,EAAA,IAAA,EAAA,EAAA,EAAA,MAAA,EAAA,EAAA,CAAA,eAAA,CAAA,UAAA,EAAA,CAAA,CAAA;AAAZ,IAAA,SAAA,IAAA,CAAA,KAAA,GAAA,EAAA,CAAA,qBAAA,CAAA,EAAA,UAAA,EAAA,QAAA,EAAA,OAAA,EAAA,QAAA,EAAA,QAAA,EAAA,EAAA,EAAA,IAAA,EAAA,YAAY,cADC,MAAM,EAAA,CAAA,CAAA;;2FACnB,YAAY,EAAA,UAAA,EAAA,CAAA;kBADxB,UAAU;mBAAC,EAAE,UAAU,EAAE,MAAM,EAAE;;;MCLrB,MAAM,GAAG,IAAI,cAAc,CAAS,QAAQ;AAE5C,MAAA,aAAa,GAAG,OAAiB;AAC5C,IAAA,OAAO,EAAE,MAAM;IACf,UAAU,EAAE,MAAK;AACf,QAAA,MAAM,UAAU,GAAG,MAAM,CAAC,WAAW,CAAC;AACtC,QAAA,OAAO,iBAAiB,CAAC,UAAU,CAAC,GAAG,MAAM,GAAG,EAAE;KACnD;AACF,CAAA;;ACXD;;AAEG;;;;"}