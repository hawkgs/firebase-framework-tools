{"version":3,"file":"ngx-templates-shared-toasts.mjs","sources":["../../../projects/shared/toasts/src/types.ts","../../../projects/shared/toasts/src/toast/toast.component.ts","../../../projects/shared/toasts/src/toast/toast.component.html","../../../projects/shared/toasts/src/toast.ts","../../../projects/shared/toasts/src/toasts.service.ts","../../../projects/shared/toasts/src/toast-outlet/toast-outlet.component.ts","../../../projects/shared/toasts/src/toast-outlet/toast-outlet.component.html","../../../projects/shared/toasts/public-api.ts","../../../projects/shared/toasts/ngx-templates-shared-toasts.ts"],"sourcesContent":["import { IconName } from '@ngx-templates/shared/icon';\n\nexport enum ToastType {\n  /**\n   * Standard small toast that appears at the top of the viewport.\n   */\n  Default = 'default',\n  /**\n   * A notification-like toast that is rendered at the bottom right\n   * portion of the viewport.\n   */\n  Notification = 'notification',\n}\n\nexport type ToastConfig = {\n  ttl: number;\n  type: ToastType;\n  /*\n   * Applicable only to ToastType.Notification\n   */\n  icon?: IconName;\n};\n","import { ChangeDetectionStrategy, Component, input } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { IconComponent } from '@ngx-templates/shared/icon';\n\nimport { Toast } from '../toast';\nimport { ToastType } from '../types';\n\nconst TYPE_TO_CLASS: { [key in ToastType]: string } = {\n  default: 'def-type',\n  notification: 'ntf-type',\n};\n\n@Component({\n  selector: 'ngx-toast',\n  imports: [CommonModule, IconComponent],\n  templateUrl: './toast.component.html',\n  styleUrl: './toast.component.scss',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ToastComponent {\n  toast = input.required<Toast>();\n\n  ToastType = ToastType;\n  TYPE_TO_CLASS = TYPE_TO_CLASS;\n}\n","<button\n  (click)=\"toast().destroy()\"\n  title=\"Close toast\"\n  [ngClass]=\"TYPE_TO_CLASS[toast().config.type]\"\n>\n  @if (toast().config.type === ToastType.Notification && toast().config.icon) {\n    <ngx-icon [name]=\"toast().config.icon!\" size=\"lg\" />\n  }\n  <span>{{ toast().name }}</span>\n</button>\n","import { WritableSignal } from '@angular/core';\nimport { List } from 'immutable';\n\nimport { ToastConfig, ToastType } from './types';\n\nconst DEFAULT_CFG: ToastConfig = {\n  ttl: 1000,\n  type: ToastType.Default,\n};\n\n/**\n * Toast item\n */\nexport class Toast {\n  public createdAt = new Date().getTime();\n  public config: ToastConfig;\n\n  private _destroyTimeout!: ReturnType<typeof setTimeout>;\n  private _destroyResolver!: () => void;\n  public destroyPromise = new Promise<void>((res) => {\n    this._destroyResolver = res;\n  });\n\n  constructor(\n    public name: string,\n    private _list: WritableSignal<List<Toast>>,\n    config?: Partial<ToastConfig>,\n  ) {\n    this.config = { ...DEFAULT_CFG, ...config };\n    this._destroyTimeout = setTimeout(() => this.destroy(), this.config.ttl);\n  }\n\n  /**\n   * Remove the toast from the list (i.e. the DOM)\n   */\n  destroy() {\n    if (this._destroyTimeout) {\n      clearTimeout(this._destroyTimeout);\n    }\n\n    const list = this._list();\n    const idx = list.findIndex((t) => t === this);\n\n    this._list.update((l) => l.remove(idx));\n    this._destroyResolver();\n  }\n}\n","import { Injectable, signal } from '@angular/core';\nimport { List } from 'immutable';\nimport { Toast } from './toast';\nimport { ToastConfig } from './types';\n\n/**\n * Provides a very simple interface for\n * creation of notification toasts.\n */\n@Injectable({ providedIn: 'root' })\nexport class ToastsService {\n  private _toasts = signal<List<Toast>>(List([]));\n\n  readonly value = this._toasts.asReadonly();\n\n  create(text: string, config?: Partial<ToastConfig>): Promise<void> {\n    const toast = new Toast(text, this._toasts, config);\n\n    this._toasts.update((l) => l.push(toast));\n\n    return toast.destroyPromise;\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  computed,\n  inject,\n} from '@angular/core';\nimport { ToastComponent } from '../toast/toast.component';\nimport { ToastsService } from '../toasts.service';\nimport { ToastType } from '../types';\n\n@Component({\n  selector: 'ngx-toast-outlet',\n  imports: [ToastComponent],\n  templateUrl: './toast-outlet.component.html',\n  styleUrl: './toast-outlet.component.scss',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ToastOutletComponent {\n  toasts = inject(ToastsService);\n\n  default = computed(() =>\n    this.toasts.value().filter((t) => t.config.type === ToastType.Default),\n  );\n\n  notifications = computed(() =>\n    this.toasts.value().filter((t) => t.config.type === ToastType.Notification),\n  );\n}\n","<div class=\"outlet default\">\n  @for (toast of default(); track toast.createdAt) {\n    <ngx-toast [toast]=\"toast\" />\n  }\n</div>\n<div class=\"outlet notifications\">\n  @for (toast of notifications(); track toast.createdAt) {\n    <ngx-toast [toast]=\"toast\" />\n  }\n</div>\n","import { ToastOutletComponent } from './src/toast-outlet/toast-outlet.component';\n\nexport { ToastOutletComponent } from './src/toast-outlet/toast-outlet.component';\nexport { ToastsService } from './src/toasts.service';\nexport { type ToastConfig, ToastType } from './src/types';\n\nexport const TOASTS_COMPONENTS = [ToastOutletComponent] as const;\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}