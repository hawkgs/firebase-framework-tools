{"version":3,"file":"ngx-templates-shared-fetch.mjs","sources":["../../../projects/shared/fetch/src/fetch-api.provider.ts","../../../projects/shared/fetch/src/fetch-abort.ts","../../../projects/shared/fetch/src/fetch-mock.ts","../../../projects/shared/fetch/ngx-templates-shared-fetch.ts"],"sourcesContent":["import { InjectionToken, Injector, Provider } from '@angular/core';\n\nexport type Fetch = (\n  input: string | URL | Request,\n  init?: RequestInit,\n) => Promise<Response>;\n\nexport const FETCH_API = new InjectionToken<Fetch>('FETCH_API');\n\n/**\n * Provide Fetch API.\n *\n * @param customImpl Use in case you want to provide your own implementation (e.g. a mock).\n * @returns Fetch `Provider`\n */\nexport const provideFetchApi = (\n  customImpl?: (() => Fetch) | ((injector: Injector) => Fetch),\n): Provider => ({\n  provide: FETCH_API,\n  // We need to bind the native fetch to globalThis since we are in SSR mode\n  // or it will throw an \"Illegal invocation\"\n  useFactory: (injector: Injector) =>\n    customImpl ? customImpl(injector) : fetch.bind(globalThis),\n  deps: [Injector],\n});\n","/**\n * Keeps track of abort controllers for running requests.\n * Use in API services.\n *\n * @returns Abort function that returns an AbortSignal\n */\nexport function fetchAbort(): (n: string) => AbortSignal {\n  const abortCtrls = new Map<string, AbortController>();\n\n  return (apiName: string) => {\n    let ctrl = abortCtrls.get(apiName);\n    if (ctrl) {\n      ctrl.abort();\n    }\n\n    ctrl = new AbortController();\n    abortCtrls.set(apiName, ctrl);\n\n    return ctrl.signal;\n  };\n}\n","// Represents a Fetch API mock created\n// purely for demo purposes.\n\nimport { InjectionToken, Injector, Provider } from '@angular/core';\n\ntype LogFn = (msg: string, obj?: object) => void;\n\n// A delayed promise response\nfunction simulateRequest(\n  jsonDataFn: () => object | Promise<object>,\n  config: FetchMockConfig,\n  log: LogFn,\n  abortSignal?: AbortSignal | null,\n): Promise<Response> {\n  let timeout: ReturnType<typeof setTimeout>;\n  let reject: (r: Response) => void = () => {};\n  let completed = false;\n  let abort = false;\n\n  // Abort the request if a signal is provided\n  abortSignal?.addEventListener('abort', () => {\n    if (!completed) {\n      log('Request aborted');\n\n      abort = true;\n      clearTimeout(timeout);\n      reject({ ok: false } as Response);\n    }\n  });\n\n  return new Promise((res, rej) => {\n    reject = rej;\n\n    timeout = setTimeout(() => {\n      // Asynchronous mock request handlers are non-cancellable.\n      // They can still be aborted but any changes that they perform on the mock state\n      // (e.g. mock POST requests), if any, are irreversible. This is due to the nature\n      // of Promises.\n      Promise.resolve(jsonDataFn()).then((resolvedJsonData) => {\n        // For Fetch mock async responses, we need to check\n        // whether the request has been cancelled upon Promise\n        // resolution.\n        if (abort) {\n          return;\n        }\n        log('Responding with data', resolvedJsonData || '<<EMPTY>>');\n        completed = true;\n\n        res({\n          ok: true,\n          json: () => Promise.resolve(resolvedJsonData),\n        } as Response);\n      });\n    }, config.responseDelay);\n  });\n}\n\n/**\n * Fetch Mock configuration object\n */\nexport type FetchMockConfig = {\n  /**\n   * Delay of the request response; in milliseconds (Default: `200`)\n   */\n  responseDelay: number;\n\n  /**\n   * Print the requests and their responses in the console (Default: `true`)\n   */\n  logging: boolean;\n};\n\nconst DEFAULT_CFG: FetchMockConfig = {\n  responseDelay: 200,\n  logging: true,\n};\n\nexport interface MockFn {\n  (\n    url: string,\n    method: string,\n    body: { [key: string]: string } | null,\n    injector: Injector,\n  ): object | Promise<object>;\n}\n\n/**\n * Fetch API Mock\n *\n * **Limitation:** _Asynchronous mock request handlers are non-cancellable.\n * They can still be aborted but any changes that they perform on the mock state\n * (e.g. mock POST requests), if any, are irreversible. This is due to the nature\n * of Promises._\n *\n * @param url\n * @param init\n * @returns\n */\nexport const withFetchMock = (\n  mockFn: MockFn,\n  config?: Partial<FetchMockConfig>,\n) => {\n  const fullCfg: FetchMockConfig = { ...DEFAULT_CFG, ...config };\n\n  // Used for logging the operation in the console\n  const log = (msg: string, obj?: object) => {\n    if (fullCfg?.logging) {\n      const prefix = msg[0] !== '*';\n      msg = prefix ? msg : msg.slice(1);\n      console.info(prefix ? 'Fetch API Mock:' : '', msg.trim(), obj || '');\n    }\n  };\n\n  return (injector: Injector) =>\n    (url: string | URL | Request, options?: RequestInit): Promise<Response> => {\n      const method = options?.method || 'GET';\n\n      log('*'); // Add some spacing in the console\n      log(`Executing request ${method} ${url}`);\n\n      const body = options?.body ? JSON.parse(options.body as string) : null;\n      if (body) {\n        log('Body', body);\n      }\n\n      return simulateRequest(\n        () => mockFn(url.toString(), method, body, injector),\n        fullCfg,\n        log,\n        options?.signal,\n      );\n    };\n};\n\nexport const FETCH_MOCK_STATE = new InjectionToken<{ state: unknown }>(\n  'FETCH_MOCK_STATE',\n);\n\n/**\n * Provide, if your Fetch API mock is stateful and uses `FETCH_MOCK_STATE`.\n */\nexport const provideFetchMockState = (): Provider => ({\n  provide: FETCH_MOCK_STATE,\n  useValue: { state: null },\n});\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}