{"version":3,"file":"ngx-templates-shared-drag-and-drop.mjs","sources":["../../../projects/shared/drag-and-drop/src/drop-grid-group.directive.ts","../../../projects/shared/drag-and-drop/src/drop-grid.component.ts","../../../projects/shared/drag-and-drop/src/drop-grid.component.html","../../../projects/shared/drag-and-drop/src/utils.ts","../../../projects/shared/drag-and-drop/src/draggable.directive.ts","../../../projects/shared/drag-and-drop/public-api.ts","../../../projects/shared/drag-and-drop/ngx-templates-shared-drag-and-drop.ts"],"sourcesContent":["import { Directive, InjectionToken } from '@angular/core';\nimport { DropGridComponent } from './drop-grid.component';\n\nexport const DROP_GRID_GROUP = new InjectionToken<Set<DropGridComponent>>(\n  'DropGridGroup',\n);\n\n/**\n * Drop grid group host directive.\n *\n * Groups are NOT supported on a mobile.\n */\n@Directive({\n  selector: '[ngxDropGridGroup]',\n  providers: [\n    { provide: DROP_GRID_GROUP, useValue: new Set<DropGridComponent>() },\n  ],\n})\nexport class DropGridGroupDirective {}\n","import {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EmbeddedViewRef,\n  InjectionToken,\n  Input,\n  NgZone,\n  Renderer2,\n  TemplateRef,\n  ViewContainerRef,\n  ViewRef,\n  computed,\n  inject,\n  input,\n  output,\n  viewChild,\n} from '@angular/core';\n\nimport { DraggableDirective } from './draggable.directive';\nimport { DROP_GRID_GROUP } from './drop-grid-group.directive';\nimport { Coor, Rect } from './types';\n\nconst DEFAULT_GRID_COLS = 4;\nconst DEFAULT_CELL_GAP = 16;\n\nconst MOUSEOVER_DELAY = 150;\n\n// The size of the active area where the auto\n// scroll is activated.\nconst HSCRL_ACTIVE_AREA = 50;\n\n// The size of the maximal scroll step (in pixels)\n// that can be reached during scroll.\nconst HSCRL_STEP = 5;\n\n// The speed of the scroll is based on how deep\n// inside the active area the mouse cursor is\n// (continuous interval [0-1]). This constant\n// controls how big the step size can become.\n// Along with HSCRL_STEP, they determine how\n// fast the auto scroll is.\nconst HSCRL_MAX_SPEED = 0.5;\n\nexport type MovedEvent = {\n  id: string;\n  pos: number;\n  affected: { id: string; pos: number }[];\n};\n\nexport type DragEvent = {\n  id: string;\n  /**\n   * - `start` – A draggable has been pulled\n   * - `move` – A draggable is being moved\n   * - `drop` – A draggable has been dropped\n   * - `anchored` – A draggable has been anchored to its slot (animation completed)\n   */\n  state: 'start' | 'move' | 'drop' | 'anchored';\n  pos?: Coor;\n};\n\n// Represents a grid cell in our spacial grid\ntype GridCell = {\n  id: string;\n  viewRefIdx: number;\n  x1: number;\n  y1: number;\n  x2: number;\n  y2: number;\n};\n\n// Represents the size/dimensions of a slot\ntype SlotSize = {\n  colSpan: number;\n  height: number;\n};\n\nconst getViewRefElement = (vr: EmbeddedViewRef<unknown>): Element =>\n  vr.rootNodes[0];\n\n// Calculates the distance between a cell and a given point\nconst getDistanceToCell = (cell: GridCell, pt: Coor) => {\n  const width = cell.x2 - cell.x1;\n  const height = cell.y2 - cell.y1;\n  const xCent = cell.x1 + width / 2;\n  const yCent = cell.y1 + height / 2;\n  const xDelta = xCent - pt.x;\n  const yDelta = yCent - pt.y;\n\n  return Math.sqrt(xDelta * xDelta + yDelta * yDelta);\n};\n\nexport const DROP_GRID = new InjectionToken<DropGridComponent>('DROP_GRID');\n\n@Component({\n  selector: 'ngx-drop-grid',\n  templateUrl: './drop-grid.component.html',\n  styleUrl: './drop-grid.component.scss',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [\n    {\n      provide: DROP_GRID,\n      useExisting: DropGridComponent,\n    },\n  ],\n})\nexport class DropGridComponent implements AfterViewInit {\n  private _zone = inject(NgZone);\n  private _elRef = inject(ElementRef);\n  private _renderer = inject(Renderer2);\n  private _group = inject(DROP_GRID_GROUP, { optional: true });\n\n  slotTemplate = viewChild.required('slotTemplate', { read: TemplateRef });\n  gridVcr = viewChild.required('grid', { read: ViewContainerRef });\n\n  /**\n   * Emits an event when a draggable has been moved and\n   * returns the new positions of all affected items.\n   */\n  moved = output<MovedEvent>();\n\n  /**\n   * Emits events throughout drag lifecycle.\n   * Runs outside of NgZone.\n   */\n  drag = output<DragEvent>();\n\n  /**\n   * Set the scroll container of the drop grid. If not set,\n   * it will default to the grid's parent element.\n   */\n  scrollCont = input<Element>();\n\n  /**\n   * Set the number of columns in the grid. Default: `4`\n   */\n  columns = input<number>(DEFAULT_GRID_COLS);\n\n  /**\n   * Set the cell gap/spacing. Default: `16px`\n   */\n  cellGap = input<number>(DEFAULT_CELL_GAP);\n\n  /**\n   * Disable when the height of the draggable items can't vary.\n   * This will activate more performant calculations upon drag.\n   * The option is overrided irrespective of the provided value,\n   * if the grid is part of a group (i.e. always enabled/true).\n   *\n   * Default: `true`\n   */\n  variableHeight = input<boolean>(true);\n\n  gridTemplateColumns = computed(\n    () => `repeat(${this.columns()}, minmax(0, 1fr))`,\n  );\n\n  // ContentChildren does not work in our case due to the dynamic\n  // nature of adding and remove views when transferring from one\n  // group to another (the content children are not updated after\n  // such operations).\n  private _draggablesDirectives = new Map<string, DraggableDirective>();\n  private _draggablesViewRefs = new Map<string, EmbeddedViewRef<unknown>>();\n  private _draggablesEventsUnsubscribers = new Map<string, () => void>();\n  private _orderedDirectives: DraggableDirective[] = [];\n\n  private _slot: EmbeddedViewRef<unknown> | null = null; // Slot spacer `ViewRef`\n  private _dragged: EmbeddedViewRef<unknown> | null = null; // Currently dragged\n  private _draggedId?: string; // Currently dragged directive ID\n  private _dropInProgress = false;\n  private _mouseOverTimeout?: ReturnType<typeof setTimeout>;\n\n  // Store in case you have to pass it to a group\n  private _slotSize: SlotSize = { colSpan: 0, height: 0 };\n\n  private _spacialGrid: GridCell[] = [];\n  private _viewIdxHover = 0; // Index of the currently hovered `ViewRef`\n  private _disabled = false;\n\n  // Scrolling/Auto scrolling\n  private _scrollContRect: Rect = { p1: { x: 0, y: 0 }, p2: { x: 0, y: 0 } };\n  private _scrollInterval?: ReturnType<typeof setInterval>;\n\n  // Used for groups; Keeps a function that triggers `moved` event\n  // on the former host after a draggable handover is completed\n  // (in order to notify the users for the transfer).\n  //\n  // Note(Georgi): This is currently disabled since it's not needed.\n  private _exHostPosNotifier: (() => void) | null = null;\n\n  constructor() {\n    // Add the current grid to the\n    // grids set, if part of a group.\n    if (this._group) {\n      this._group.add(this);\n    }\n  }\n\n  @Input()\n  set disabled(v: boolean) {\n    this._disabled = v;\n\n    for (const [, d] of this._draggablesDirectives) {\n      d.disabled.set(v);\n    }\n  }\n\n  /**\n   * Returns `true`, if the current grid is\n   * the drag host. Used for groups.\n   */\n  get isDragHost() {\n    return !!this._slot;\n  }\n\n  get dropInProgress() {\n    return this._dropInProgress;\n  }\n\n  private get _scrollCont(): Element {\n    return this.scrollCont() || this._elRef.nativeElement.parentElement;\n  }\n\n  ngAfterViewInit() {\n    this._zone.runOutsideAngular(() => {\n      const el = this._elRef.nativeElement;\n\n      this._renderer.listen(el, 'mouseenter', (e) => this._initiateHandover(e));\n\n      // Sometimes the hand over initiation can't happen, if the drag occurred\n      // very fast (mouseenter event precedes the slot creation). That's why,\n      // there is a fallback mouseover handler that guarantees a handover.\n      this._renderer.listen(el, 'mouseover', (e) => {\n        if (this.isDragHost) {\n          return;\n        }\n        if (this._mouseOverTimeout) {\n          clearTimeout(this._mouseOverTimeout);\n        }\n        this._mouseOverTimeout = setTimeout(\n          () => this._initiateHandover(e),\n          MOUSEOVER_DELAY,\n        );\n      });\n    });\n  }\n\n  insertDraggable(d: DraggableDirective) {\n    const draggableViewRef = d.templateRef.createEmbeddedView(null);\n    const pos = d.position();\n    let insertionIdx = 0;\n\n    // Since we might receive the draggables unordered\n    // and in non-consecutive order,\n    // i.e. \"pos 5\" first, \"pos 3\" second, \"pos 7\" third, etc.\n    // we need to make sure they are inserted at the\n    // correct index in the view container.\n    if (this._orderedDirectives.length) {\n      insertionIdx = this._orderedDirectives.length;\n\n      for (let i = 0; i < this._orderedDirectives.length; i++) {\n        const dirPos = this._orderedDirectives[i].position();\n\n        if (dirPos >= pos) {\n          insertionIdx = i;\n          break;\n        }\n      }\n      this._orderedDirectives.splice(insertionIdx, 0, d);\n    } else {\n      this._orderedDirectives.push(d);\n    }\n\n    this.gridVcr().insert(draggableViewRef, insertionIdx);\n\n    // If the element exists, this means we are dealing with a re-rendering.\n    // So, we have to clean up the old view.\n    if (this._draggablesDirectives.has(d.id())) {\n      this._draggablesViewRefs.get(d.id())?.destroy();\n    }\n\n    // We need to set the native element of the draggable target and\n    // subscribe to the events that are going to be emitted on user\n    // interaction. This is an unconventional approach of using/applying\n    // structural directives.\n    d.element = getViewRefElement(draggableViewRef);\n    d.initEvents();\n\n    this._subscribeToDraggableEvents(d);\n\n    if (this._disabled) {\n      d.disabled.set(true);\n    }\n\n    this._draggablesDirectives.set(d.id(), d);\n    this._draggablesViewRefs.set(d.id(), draggableViewRef);\n  }\n\n  destroyDraggable(d: DraggableDirective) {\n    const draggableViewRef = this._draggablesViewRefs.get(d.id());\n    draggableViewRef?.destroy();\n\n    this._cleanAllReferences(d.id());\n  }\n\n  onDragStart({\n    elContPos,\n    rect,\n    id,\n  }: {\n    elContPos: Coor;\n    rect: Rect;\n    id: string;\n  }) {\n    const directive = this._draggablesDirectives.get(id);\n\n    directive?.anchor.set(elContPos);\n\n    const draggableSize = directive?.elementSize() || 1;\n\n    // Store the size of the slot in case the\n    // grid is part of a group (we'll need to pass\n    // that data during a hand over).\n    this._slotSize = {\n      colSpan: draggableSize,\n      height: rect.p2.y - rect.p1.y,\n    };\n    this._slot = this._createSlot(this._slotSize);\n\n    this._dragged = this._draggablesViewRefs.get(id) || null;\n    this._draggedId = id;\n\n    const gridVcr = this.gridVcr();\n    const viewIdx = gridVcr.indexOf(this._dragged!);\n    gridVcr.insert(this._slot, viewIdx);\n\n    this._viewIdxHover = viewIdx;\n\n    this._calculateSpacialGrid();\n    this._calculateScrollContRect();\n\n    this.drag.emit({ id, state: 'start' });\n  }\n\n  onDrag({ pos, rect }: { pos: Coor; rect: Rect }) {\n    if (!this._slot) {\n      return;\n    }\n\n    // Since the coordinates returned from `ngxDraggable` are\n    // relative to the viewport, we must add the `scrollTop`\n    // in order to accommodate for the whole page.\n    pos.y += this._scrollCont.scrollTop;\n\n    // Check where the draggable is hovering and move the\n    // slot spacer accordingly.\n    for (const cell of this._spacialGrid) {\n      if (\n        this._viewIdxHover !== cell.viewRefIdx &&\n        cell.x1 <= pos.x &&\n        pos.x <= cell.x2 &&\n        cell.y1 <= pos.y &&\n        pos.y <= cell.y2\n      ) {\n        this.gridVcr().move(this._slot, cell.viewRefIdx);\n        this._viewIdxHover = cell.viewRefIdx;\n\n        break;\n      }\n    }\n\n    this._scrollContainer(rect);\n    this.drag.emit({\n      id: this._draggedId!,\n      state: 'move',\n      pos,\n    });\n  }\n\n  onDrop(e: { id: string }) {\n    if (!this._slot) {\n      return;\n    }\n\n    this._dropInProgress = true;\n\n    const { x, y } = getViewRefElement(this._slot).getBoundingClientRect();\n    this._zone.run(() => {\n      this._draggablesDirectives.get(e.id)?.anchor.set({ x, y });\n    });\n\n    this.drag.emit({ id: e.id, state: 'drop' });\n  }\n\n  onAnchored() {\n    if (!this._slot) {\n      return;\n    }\n\n    this._dropInProgress = false;\n\n    this._slot.destroy();\n    // We have to manually clear the the slot\n    // in order to prevent event handlers from executing.\n    this._slot = null;\n\n    const gridVcr = this.gridVcr();\n    const currIdx = gridVcr.indexOf(this._dragged!);\n    const newIdx =\n      this._viewIdxHover > currIdx\n        ? this._viewIdxHover - 1\n        : this._viewIdxHover;\n\n    gridVcr.move(this._dragged!, newIdx);\n\n    // Notify for the updated positions\n    this._emitUpdatedPositions();\n\n    if (this._exHostPosNotifier) {\n      // Note(Georgi): Currently disabled\n      // this._exHostPosNotifier();\n      this._exHostPosNotifier = null;\n    }\n\n    this.drag.emit({\n      id: this._draggedId!,\n      state: 'anchored',\n    });\n  }\n\n  /**\n   * Hands over all needed state to the new drop grid host\n   * and cleans the state of the current grid (old host).\n   *\n   * Used only for grouped grids.\n   */\n  handOverDragging(): {\n    directive: DraggableDirective;\n    viewRef: EmbeddedViewRef<unknown>;\n    slotSize: SlotSize;\n    positionsNotifier: () => void;\n  } {\n    // Destroy the slot\n    this._slot?.destroy();\n    this._slot = null;\n\n    // Detach the draggable view ref from the current grid\n    // without destroying it\n    const viewRef = this._dragged!;\n    const idx = this.gridVcr().indexOf(viewRef);\n    if (idx > -1) {\n      this.gridVcr().detach(idx);\n    }\n\n    this._dragged = null;\n\n    const id = this._draggedId!;\n    const directive = this._draggablesDirectives.get(id)!;\n\n    // Clear all of the state related to the tranferred draggable\n    // that is no longer needed or might interfere with proper\n    // functioning of the feature\n    this._cleanAllReferences(id);\n\n    const unsubscriber = this._draggablesEventsUnsubscribers.get(id)!;\n    unsubscriber();\n\n    return {\n      directive,\n      viewRef,\n      slotSize: { ...this._slotSize },\n      positionsNotifier: () => this._emitUpdatedPositions(),\n    };\n  }\n\n  /**\n   * Handles transfer from one draggable grid (host) to the current one.\n   *\n   * Available only for grouped grids.\n   */\n  private _initiateHandover(e: MouseEvent) {\n    if (!this._group || this.isDragHost) {\n      return;\n    }\n\n    const grids = Array.from(this._group).filter((g) => g !== this);\n\n    // Abort if there is a drop in progress somewhere\n    const dropInProgress = grids.find((g) => g.dropInProgress);\n    if (dropInProgress) {\n      return;\n    }\n\n    // Determine if there is a drag host (excl. `this`)\n    const dragHost = grids.find((g) => g.isDragHost);\n    if (!dragHost) {\n      return;\n    }\n\n    // Request a transfer from the old/current host and\n    // set all required state properties\n    const { viewRef, directive, slotSize, positionsNotifier } =\n      dragHost.handOverDragging();\n\n    this._dragged = viewRef;\n    this._slotSize = slotSize;\n    this._draggedId = directive.id();\n    this._slot = this._createSlot(slotSize);\n    this._exHostPosNotifier = positionsNotifier;\n\n    // Save the references and subscribe to the draggable event handlers\n    this._draggablesDirectives.set(directive.id(), directive);\n    this._draggablesViewRefs.set(directive.id(), viewRef);\n\n    // Note(Georgi): There might be a more efficient way\n    // where we don't have unsubscribe and subscribe to the event\n    // handlers on each transfer but that'll require a more\n    // major overhaul of the drop grid.\n    this._subscribeToDraggableEvents(directive);\n\n    this._calculateSpacialGrid();\n    this._calculateScrollContRect();\n\n    // Set the default position/index of the slot to 0\n    const gridVcr = this.gridVcr();\n    this._viewIdxHover = 0;\n\n    // If there are other draggables in the list,\n    // find the closest one and use its position for\n    // the slot\n    if (this._spacialGrid.length > 1) {\n      const pos = {\n        x: e.clientX,\n        y: e.clientY,\n      };\n\n      let minDist = Number.POSITIVE_INFINITY;\n      let closestCell: GridCell | undefined;\n\n      for (const cell of this._spacialGrid) {\n        const dist = getDistanceToCell(cell, pos);\n        if (minDist > dist) {\n          minDist = dist;\n          closestCell = cell;\n        }\n      }\n\n      if (closestCell) {\n        this._viewIdxHover = closestCell.viewRefIdx;\n      }\n    }\n\n    // Insert the draggable and the slot in the new VCR\n    // of the new/current host\n    gridVcr.insert(this._dragged, this._viewIdxHover);\n    gridVcr.insert(this._slot, this._viewIdxHover);\n\n    // We have to recalculate the grid after insertion of\n    // the newly transferred item.\n    //\n    // Note(Georgi): There is room for some optimizations.\n    this._calculateSpacialGrid();\n\n    // Set the new anchor\n    const { x, y } = this._slot.rootNodes[0].getBoundingClientRect();\n    directive.anchor.set({ x, y });\n  }\n\n  /**\n   * Creates a slot element without inserting it\n   * in a view container.\n   */\n  private _createSlot({ colSpan, height }: SlotSize): EmbeddedViewRef<unknown> {\n    const slot = this.slotTemplate().createEmbeddedView({});\n\n    // Note(Georgi): Don't use the $implicit context of createEmbeddedView\n    // to pass the col span and the height of the slot to the template.\n    // The changes are applied after the spacial grid calculation which\n    // breaks the grid, unless it's deferred via setTimeout.\n    const [node] = slot.rootNodes;\n    this._renderer.setStyle(node, 'height', height + 'px');\n    this._renderer.setStyle(node, 'grid-column', 'span ' + colSpan);\n\n    return slot;\n  }\n\n  /**\n   * Subscribes to draggable directive event handlers and\n   * stores their unsubscribers in the component's state.\n   */\n  private _subscribeToDraggableEvents(d: DraggableDirective) {\n    const unsubscribers = [\n      d._dragStart.subscribe((e) => this.onDragStart(e)),\n      d._dragMove.subscribe((e) => this.onDrag(e)),\n      d._drop.subscribe((e) => this.onDrop(e)),\n      d._anchored.subscribe(() => this.onAnchored()),\n    ];\n\n    const unsubscribeFn = () => {\n      for (const fn of unsubscribers) {\n        fn.unsubscribe();\n      }\n    };\n\n    this._draggablesEventsUnsubscribers.set(d.id(), unsubscribeFn);\n  }\n\n  /**\n   * Scroll the `scrollCont` up or down the page, if a draggable is\n   * dragged to the top or the bottom of the scroll container.\n   * a.k.a. Auto scrolling\n   *\n   * Horizontal scroll should be handled separately by the developer.\n   *\n   * @param draggableRect\n   */\n  private _scrollContainer({ p1, p2 }: Rect) {\n    if (this._scrollInterval) {\n      clearInterval(this._scrollInterval);\n    }\n\n    const yCenter = (p2.y - p1.y) / 2 + p1.y;\n    const yTop = yCenter - this._scrollContRect.p1.y;\n    const yBottom = this._scrollContRect?.p2.y - yCenter;\n    const dTop = HSCRL_ACTIVE_AREA - yTop;\n    const dBottom = HSCRL_ACTIVE_AREA - yBottom;\n    const cont = this._scrollCont;\n    const scrolled = Math.ceil(cont.clientHeight + cont.scrollTop);\n\n    if (dTop >= 0 && cont.scrollTop > 0) {\n      const speed = Math.min(dTop / HSCRL_ACTIVE_AREA, HSCRL_MAX_SPEED);\n      this._scrollInterval = setInterval(() => {\n        cont.scrollTo(0, cont.scrollTop - HSCRL_STEP * speed);\n      });\n    } else if (dBottom >= 0 && cont.scrollHeight > scrolled) {\n      const speed = Math.min(dBottom / HSCRL_ACTIVE_AREA, HSCRL_MAX_SPEED);\n      this._scrollInterval = setInterval(() => {\n        cont.scrollTo(0, cont.scrollTop + HSCRL_STEP * speed);\n      });\n    }\n  }\n\n  private _emitUpdatedPositions() {\n    const affected: { id: string; pos: number }[] = [];\n    let targetPos = -1;\n\n    for (const [id, vr] of this._draggablesViewRefs) {\n      const pos = this.gridVcr().indexOf(vr);\n      if (id === this._draggedId) {\n        targetPos = pos;\n      }\n      affected.push({ id, pos });\n    }\n\n    this.moved.emit({\n      id: this._draggedId!,\n      pos: targetPos,\n      affected,\n    });\n  }\n\n  /**\n   * Create/calculate a spacial grid of all draggable elements\n   * relative to the whole page (i.e. the coordinates of the\n   * top-left and bottom-right points of each draggable in the grid)\n   */\n  private _calculateSpacialGrid() {\n    this._spacialGrid = [];\n\n    if (!this._draggablesViewRefs.size) {\n      return;\n    }\n\n    // If the items don't have a variable height or are part\n    // of a group, we can use a more performant way for calculating\n    // the grid.\n    if (!this.variableHeight() && !this._group) {\n      this._calculateStaticSpacialGrid();\n    } else {\n      this._calculateDynamicSpacialGrid();\n    }\n  }\n\n  private _calculateDynamicSpacialGrid() {\n    this._spacialGrid = this._getOrderedDraggables().map((draggable) => {\n      // Ensure that we are using the slot position in\n      // case the dragged element is outside the grid\n      let element = draggable.directive.element;\n      if (draggable.id === this._draggedId) {\n        element = this._slot?.rootNodes[0];\n      }\n\n      const { x, y, width, height } = element.getBoundingClientRect();\n      const yWithScroll = y + this._scrollCont.scrollTop;\n\n      return {\n        id: draggable.id,\n        viewRefIdx: draggable.idx,\n        x1: x,\n        y1: yWithScroll,\n        x2: width + x,\n        y2: height + yWithScroll,\n      };\n    });\n  }\n\n  private _calculateStaticSpacialGrid() {\n    // This implementation relies on a single call of `getBoundingClientRect`.\n    // The rest of the grid cell position are deduced from the first one.\n    // It's a more complex approach compared to the straightforward\n    // \"getBoundingClientRect on each iteration\", but it should be more\n    // performant, especially for lower-end devices.\n\n    // Get the draggables in the order that they are rendered\n    const draggables = this._getOrderedDraggables();\n\n    // Calculate the bounding rectangle for the first element\n    const firstItem = draggables[0].directive;\n    const {\n      x: startX,\n      y,\n      width,\n      height: cellHeight,\n    } = firstItem.element.getBoundingClientRect();\n\n    // Setup the initial positions and the gaps/spacing\n    const startY = y + this._scrollCont.scrollTop;\n    const cols = this.columns();\n    const gap = this.cellGap();\n\n    const firstItemSize = firstItem.elementSize();\n    const cellWidth = (width - gap * (firstItemSize - 1)) / firstItemSize;\n\n    let currX = startX;\n    let currY = startY;\n    let currWidth = 0;\n\n    // Deduce the rest of the positions based on that\n    for (const draggable of draggables) {\n      const size = draggable.directive.elementSize();\n      const width = cellWidth * size + gap * (size - 1);\n\n      currWidth += size;\n\n      if (currWidth > cols) {\n        currY += cellHeight + gap;\n        currX = startX;\n        currWidth = size;\n      }\n\n      this._spacialGrid.push({\n        id: draggable.id,\n        viewRefIdx: draggable.idx,\n        x1: currX,\n        y1: currY,\n        x2: currX + width,\n        y2: currY + cellHeight,\n      });\n\n      currX += width + gap;\n    }\n  }\n\n  /**\n   * Helper method for calculating the spacial grid.\n   *\n   * Returns draggable objects in the order they are rendered.\n   */\n  private _getOrderedDraggables() {\n    const ordered: {\n      id: string;\n      viewRef: ViewRef;\n      idx: number;\n      directive: DraggableDirective;\n    }[] = [];\n\n    for (const [id, vr] of this._draggablesViewRefs) {\n      ordered.push({\n        id: id,\n        viewRef: vr,\n        idx: this.gridVcr()?.indexOf(vr) as number,\n        directive: this._draggablesDirectives.get(id) as DraggableDirective,\n      });\n    }\n\n    ordered.sort((a, b) => a.idx - b.idx);\n\n    return ordered;\n  }\n\n  /**\n   * Clean all references of the provided directive\n   */\n  private _cleanAllReferences(id: string) {\n    this._draggablesDirectives.delete(id);\n    this._draggablesViewRefs.delete(id);\n\n    const orderedIdx = this._orderedDirectives.findIndex((d) => d.id() === id);\n    if (orderedIdx > -1) {\n      this._orderedDirectives.splice(orderedIdx, 1);\n    }\n  }\n\n  /**\n   * Required for the auto scrolling.\n   * Should be called once the drag starts or a handover is performed.\n   */\n  private _calculateScrollContRect() {\n    const { top, left, bottom, right } =\n      this._scrollCont.getBoundingClientRect();\n\n    this._scrollContRect = {\n      p1: { x: left, y: top },\n      p2: { x: right, y: bottom },\n    };\n  }\n}\n","<ng-template #slotTemplate>\n  <div class=\"slot\"></div>\n</ng-template>\n\n<section\n  class=\"grid\"\n  [style.grid-template-columns]=\"gridTemplateColumns()\"\n  [style.gap]=\"cellGap() + 'px'\"\n>\n  <ng-container #grid />\n</section>\n","import { Coor } from './types';\n\n/**\n * Returns the coordinates of the mouse/finger based on the event type.\n *\n * @param e Mouse or touch event\n * @returns The position as `Coor`\n */\nexport const getClientPointerPos = (e: MouseEvent | TouchEvent): Coor => {\n  if (e instanceof MouseEvent) {\n    return { x: e.clientX, y: e.clientY };\n  }\n  return {\n    x: e.touches[0].clientX,\n    y: e.touches[0].clientY,\n  };\n};\n","import { DOCUMENT } from '@angular/common';\nimport {\n  Directive,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Renderer2,\n  TemplateRef,\n  computed,\n  effect,\n  inject,\n  input,\n  output,\n  signal,\n} from '@angular/core';\nimport { WINDOW, provideWindow } from '@ngx-templates/shared/services';\nimport { DROP_GRID } from './drop-grid.component';\nimport { Coor, Rect } from './types';\nimport { getClientPointerPos } from './utils';\n\n// The duration of the rappel animation after the\n// user has released the draggable element.\nconst RAPPEL_ANIM_DURR = 300;\n\n// Allow for some leeway clicking the draggable element.\n// The drag functionality will be activated after the specified\n// time, if the user is still holding the element.\nconst DRAG_ACTIVE_AFTER = 200;\nconst DRAG_ACTIVE_AFTER_TOUCH = 1000;\n\n// The level of the opacity while the target is being dragged.\nconst DRAG_OPACITY = 0.8;\n\n/**\n * Adds draggable behavior to an element. Should be used as\n * a structural directive  along with `ngx-drop-grid`.\n */\n@Directive({\n  selector: '[ngxDraggable]',\n  providers: [provideWindow()],\n})\nexport class DraggableDirective implements OnInit, OnDestroy {\n  templateRef = inject(TemplateRef);\n  private _doc = inject(DOCUMENT);\n  private _win = inject(WINDOW);\n  private _zone = inject(NgZone);\n  private _renderer = inject(Renderer2);\n  private _grid = inject(DROP_GRID, { optional: true });\n\n  private _listeners: (() => void)[] = [];\n  private _dragging = false;\n  private _elMidpoint: Coor | null = null;\n  private _relativeMousePos: Coor = { x: 0, y: 0 };\n  private _dragActivatorTimeout?: ReturnType<typeof setTimeout>;\n  private _element!: Element;\n\n  /**\n   * ID of the draggable element. Default: `'0'`\n   */\n  id = input<string>('0', { alias: 'ngxDraggable' });\n\n  /**\n   * Represents the draggable size in the `ngx-drop-grid`.\n   * Shouldn't exceed the number of grid columns. Default: `1`\n   */\n  elementSize = input<number>(1, { alias: 'ngxDraggableSize' });\n\n  /**\n   * Zero-based position or order of the draggable element in the `ngx-drop-grid`.\n   * Not dynamic.\n   */\n  position = input<number>(0, { alias: 'ngxDraggablePosition' });\n\n  /**\n   * The columns number in the `ngx-drop-grid`\n   */\n  gridColumns = input<number>(1, { alias: 'ngxDraggableCols' });\n\n  /**\n   * Disables the drag functionality.\n   */\n  disabled = signal<boolean>(false);\n\n  /**\n   * The position where the draggable will be placed when dropped.\n   */\n  anchor = signal<Coor | null>(null);\n\n  /**\n   * INTERNAL USE ONLY. Emitted when the drag starts.\n   *\n   * - `elContPos` represents the relative to the viewport top-left\n   * coordinates of the draggable target\n   * - `id` is the ID of the draggable\n   */\n  _dragStart = output<{ elContPos: Coor; rect: Rect; id: string }>();\n\n  /**\n   * INTERNAL USE ONLY. Emitted on drag move.\n   *\n   * - `pos` represents the relative to the viewport mid/center coordinates\n   * of the draggable target\n   * - `rect` represents the coordinates of the bounding rectangle of the\n   * draggable target\n   * - `id` is the ID of the draggable\n   */\n  _dragMove = output<{ pos: Coor; rect: Rect; id: string }>();\n\n  /**\n   * INTERNAL USE ONLY. Emitted when the draggable is dropped.\n   */\n  _drop = output<{ id: string }>();\n\n  /**\n   * INTERNAL USE ONLY. Emitted when the drop animation is completed,\n   * i.e. the target is now anchored\n   */\n  _anchored = output<void>();\n\n  /**\n   * Native element of the draggable target.\n   */\n  set element(v: Element) {\n    this._element = v;\n    this._setStyles({ 'grid-column': 'span ' + this._renderedSize() });\n  }\n\n  get element() {\n    return this._element;\n  }\n\n  private _renderedSize = computed(() =>\n    Math.min(this.elementSize(), this.gridColumns()),\n  );\n\n  constructor() {\n    effect(() => {\n      this._setStyles({ 'grid-column': 'span ' + this._renderedSize() });\n    });\n  }\n\n  ngOnInit() {\n    if (this._grid) {\n      this._grid.insertDraggable(this);\n    }\n  }\n\n  ngOnDestroy() {\n    for (const cb of this._listeners) {\n      cb();\n    }\n\n    if (this._grid) {\n      this._grid.destroyDraggable(this);\n    }\n  }\n\n  /**\n   * Initialize all draggable events.\n   *\n   * Note: Has to be called manually after the `element` has been defined.\n   */\n  initEvents() {\n    if (!this._element) {\n      throw new Error('DraggableDirective: Missing element');\n    }\n\n    this._zone.runOutsideAngular(() => {\n      const dragStart = this._onDragStart.bind(this);\n      const dragMove = this._onDragMove.bind(this);\n      const dragEnd = this._onDragEnd.bind(this);\n\n      this._listeners = [\n        this._renderer.listen(this._element, 'mousedown', dragStart),\n        this._renderer.listen(this._doc, 'mousemove', dragMove),\n        this._renderer.listen(this._doc, 'mouseup', dragEnd),\n\n        this._renderer.listen(this._element, 'touchstart', dragStart),\n        this._renderer.listen(this._doc, 'touchend', dragEnd),\n      ];\n\n      // Since we need to prevent panning on a mobile device\n      // while dragging but the default behavior of Renderer2.listen\n      // is to optimize `touchmove` event listeners by making them passive,\n      // we have to use the native API instead. This, obviously,\n      // presents a performance hit given that the listener is active\n      // but, if we prevent the default behavior on `touchstart`,\n      // we will block all subsequent click events originating from\n      // the draggable.\n      const listener = (e: Event) => {\n        e.preventDefault();\n        dragMove(e as TouchEvent);\n      };\n      this._element.addEventListener('touchmove', listener);\n      this._listeners.push(() =>\n        this._element.removeEventListener('touchmove', listener),\n      );\n    });\n  }\n\n  private _onDragStart(e: MouseEvent | TouchEvent) {\n    if (this.disabled()) {\n      return;\n    }\n\n    this._firefoxUserSelectMouseEventsPatch();\n\n    const activationDelay = !this._hasTouchSupport()\n      ? DRAG_ACTIVE_AFTER\n      : DRAG_ACTIVE_AFTER_TOUCH;\n\n    this._dragActivatorTimeout = setTimeout(() => {\n      this._dragging = true;\n\n      const { x, y, width, height } = this._element.getBoundingClientRect();\n      const pos = { x, y };\n      const client = getClientPointerPos(e);\n\n      this._relativeMousePos = {\n        x: client.x - x,\n        y: client.y - y,\n      };\n\n      this._applyDraggableStyles(pos, { x: width, y: height });\n\n      // Clear text selection, if any\n      this._win.getSelection()?.removeAllRanges();\n\n      if (!this._elMidpoint) {\n        this._elMidpoint = {\n          x: width / 2,\n          y: height / 2,\n        };\n      }\n\n      this._dragStart.emit({\n        id: this.id(),\n        elContPos: pos,\n        rect: {\n          p1: pos,\n          p2: {\n            x: x + width,\n            y: y + height,\n          },\n        },\n      });\n    }, activationDelay);\n  }\n\n  private _onDragMove(e: MouseEvent | TouchEvent) {\n    if (!this._dragging) {\n      return;\n    }\n\n    // This will disable auto-scroll. However,\n    // it will also prevent the undesired text\n    // selection.\n    if (e instanceof MouseEvent) {\n      e.preventDefault();\n    }\n\n    const client = getClientPointerPos(e);\n    const offset = this._relativeMousePos;\n    const pos = {\n      x: client.x - offset.x,\n      y: client.y - offset.y,\n    };\n\n    this._move(pos);\n\n    this._dragMove.emit({\n      pos: {\n        x: pos.x + this._elMidpoint!.x,\n        y: pos.y + this._elMidpoint!.y,\n      },\n      rect: {\n        p1: pos,\n        p2: {\n          x: pos.x + this._elMidpoint!.x * 2,\n          y: pos.y + this._elMidpoint!.y * 2,\n        },\n      },\n      id: this.id(),\n    });\n  }\n\n  private _onDragEnd() {\n    if (this._dragActivatorTimeout) {\n      clearTimeout(this._dragActivatorTimeout);\n    }\n    if (this._dragging) {\n      this._drop.emit({ id: this.id() });\n      this._moveToAnchorPos();\n      this._dragging = false;\n    }\n  }\n\n  private _applyDraggableStyles(initPos: Coor, size: Coor) {\n    this._setStyles({\n      position: 'fixed',\n      top: '0',\n      left: '0',\n      opacity: DRAG_OPACITY.toString(),\n      width: size.x + 'px',\n      height: size.y + 'px',\n      'pointer-events': 'none',\n      'touch-action': 'none',\n      'z-index': '99999999',\n    });\n\n    // Doc styles\n    this._renderer.setStyle(this._doc.body, 'user-select', 'none');\n    this._renderer.setStyle(this._doc.body, '-webkit-user-select', 'none');\n\n    this._move(initPos);\n  }\n\n  private _removeDraggableStyles() {\n    this._removeStyles([\n      'transition',\n      'position',\n      'top',\n      'left',\n      'opacity',\n      'transform',\n      'width',\n      'height',\n      'pointer-events',\n      'touch-action',\n      'user-select',\n      'z-index',\n    ]);\n\n    // Doc styles\n    this._renderer.removeStyle(this._doc.body, 'user-select');\n    this._renderer.removeStyle(this._doc.body, '-webkit-user-select');\n  }\n\n  private _move(coor: Coor) {\n    const translate = `translate(${coor.x}px, ${coor.y}px)`;\n\n    this._renderer.setStyle(this._element, 'transform', translate);\n  }\n\n  /**\n   * Moves/rappels the draggable target element to its\n   * new position after it was released.\n   */\n  private _moveToAnchorPos() {\n    const anchor = this.anchor();\n    if (!anchor) {\n      this._removeStyles(['opacity']);\n      this._anchored.emit();\n      return;\n    }\n\n    this._renderer.setStyle(\n      this._element,\n      'transition',\n      `transform ${RAPPEL_ANIM_DURR}ms ease`,\n    );\n\n    this._move(anchor);\n\n    setTimeout(() => {\n      this._removeDraggableStyles();\n      this._anchored.emit();\n    }, RAPPEL_ANIM_DURR);\n  }\n\n  /** Set styles to the target element */\n  private _setStyles(stylesObj: { [key: string]: string }) {\n    for (const cssProp in stylesObj) {\n      const value = stylesObj[cssProp];\n      this._renderer.setStyle(this._element, cssProp, value);\n    }\n  }\n\n  /** Remove styles from the target element */\n  private _removeStyles(cssProps: string[]) {\n    for (const p of cssProps) {\n      this._renderer.removeStyle(this._element, p);\n    }\n  }\n\n  private _hasTouchSupport() {\n    return (\n      'ontouchstart' in this._win || this._win.navigator.maxTouchPoints > 0\n    );\n  }\n\n  /**\n   * This is a patch for an undetermined issue occurring only in Firefox.\n   * If the draggable contains any sort of selectable text that is selected\n   * prior to the activation of the drag functionality (timeout execution),\n   * dragging the draggable across grids outside of the current host grid\n   * (e.g. in a group setting) won't trigger any of their mouse events that\n   * are crucial for performing a successful draggable transfer. This, in\n   * effect, breaks the groups functionality. Unfortunately, the only viable\n   * option at this stage is to disable text selection for the target element\n   * prior to the drag functionality activation since programatically clearing\n   * the text selection doesn't render positive results, nor disabling the\n   * selection after activation as intended; therefore, draggable elements in\n   * a group, in Firefox doesn't support text selection for now.\n   */\n  private _firefoxUserSelectMouseEventsPatch() {\n    const userAgent = this._win.navigator.userAgent.toLowerCase();\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    if (userAgent.includes('firefox') && !!(this._grid as any)._group) {\n      this._setStyles({ 'user-select': 'none' });\n    }\n  }\n}\n","import { DraggableDirective } from './src/draggable.directive';\nimport { DropGridComponent } from './src/drop-grid.component';\nimport { DropGridGroupDirective } from './src/drop-grid-group.directive';\n\nexport { DraggableDirective } from './src/draggable.directive';\nexport {\n  DropGridComponent,\n  type DragEvent,\n  type MovedEvent,\n} from './src/drop-grid.component';\nexport { DropGridGroupDirective } from './src/drop-grid-group.directive';\n\nexport const DRAG_AND_DROP_DIRECTIVES = [\n  DraggableDirective,\n  DropGridComponent,\n  DropGridGroupDirective,\n] as const;\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}